#!/bin/bash

set -e

# Command configuration
CUSTOM_CMD="${CUSTOM_CMD:-"clear"}"
MPD_CMD="${MPD_CMD:-"mpc -q toggle"}"

if [[ "$OSTYPE" =~ (^darwin|^freebsd) ]]; then
   NOTIFY_CMD="${NOTIFY_CMD:-"echo"}"
   SPEAK_CMD="${SPEAK_CMD:-"&>/dev/null say"}"
else
   NOTIFY_CMD="${NOTIFY_CMD:-"notify-send"}"
   SPEAK_CMD="${SPEAK_CMD:-"&>/dev/null espeak"}"
fi

# Setting configuration
DEFAULT_WORK_LENGTH=${DEFAULT_WORK_LENGTH:-15}
NOTIFY_WORK="${NOTIFY_WORK:-"\"Get things done.\""}"
NOTIFY_BREAK="${NOTIFY_BREAK:-"\"Take a break.\""}"
SPEAK_WORK="${SPEAK_WORK:-"$NOTIFY_WORK"}"
SPEAK_BREAK="${SPEAK_BREAK:-"$NOTIFY_BREAK"}"

# Flag configuration
DO_BREAK=${DO_BREAK:-false}
DO_CUSTOM_CMD=${DO_CUSTOM_CMD:-false}
DO_MPD=${DO_MPD:-false}
DO_NOTIFY=${DO_NOTIFY:-false}
DO_SPEAK=${DO_SPEAK:-false}
DO_TMUX=${DO_TMUX:-false}

# Display help
usage() {
cat << EOF
USAGE:

   gtd [ -bcmnst ] [ work length ] [ break length ]

OPTIONS:

   -b : start on a break
   -c : custom command (defaults to "clear")
   -m : toggle MPD on change
   -n : notify on change
   -s : speak command
   -t : show time in tmux status bar

EOF
}

# Set flag options
while getopts "bcmnsth?" opt; do
   case $opt in
      b) if $DO_BREAK;  then DO_BREAK=false;  else DO_BREAK=true;  fi;;
      c) if $DO_CUSTOM; then DO_CUSTOM=false; else DO_CUSTOM=true; fi;;
      m) if $DO_MPD;    then DO_MPD=false;    else DO_MPD=true;    fi;;
      n) if $DO_NOTIFY; then DO_NOTIFY=false; else DO_NOTIFY=true; fi;;
      s) if $DO_SPEAK;  then DO_SPEAK=false;  else DO_SPEAK=true;  fi;;
      t) if $DO_TMUX;   then DO_TMUX=false;   else DO_TMUX=true;   fi;;
      *) usage; exit 1;;
   esac
done
shift $((OPTIND-1))

# Set work length if specified and is a number
if [ -z "$1" ]; then
   work_length=$DEFAULT_WORK_LENGTH
elif [ ! -z "${1##[0-9]*}" ]; then
   usage && exit 1
else
   work_length=$1
fi

# Set break length if specified and is a number
if [ -z "$2" ]; then
   break_length=$(( $work_length / 5 ))
elif [ ! -z "${2##[0-9]*}" ]; then
   usage && exit 1
else
   break_length=$2
fi

# Collect session statistics
total_working_time=0
count=1
interrupt=false

# Displays milliseconds as HH:MM:SS
hms() {
   local S=$1
   ((h=S/3600))
   ((m=S%3600/60))
   ((s=S%60))
   if $interrupt; then
      printf "\e]1;(tot) %02d:%02d:%02d\a" $h $m $s
   elif $in_break; then
      printf "\e]1;(brk) %02d:%02d:%02d\a" $h $m $s
   else
      printf "\e]1;(gtd) %02d:%02d:%02d\a" $h $m $s
   fi
   printf "%02d:%02d:%02d\n" $h $m $s
}

# Displays a countdown using hms() while sleeping ("visual" sleep)
vsleep() {
   if [[ "$OSTYPE" =~ (^darwin|^freebsd) ]]; then
      now="date -j +%s"
      later=$(date -j -v+$1S +%s)
   else
      now="date +%s"
      later=$(date --date "now +$1 seconds" +%s)
   fi
   while [ $(eval $now) -lt $later ]; do
      left=$(( $later - $(eval $now) ))
      hms=$(hms $left)
      # Updates a temporary file for tmux to read from and refreshes the client
      if $DO_TMUX; then
         (echo -ne "$hms |" > /tmp/gtd)
         (tmux refresh-client -S)
      fi
      echo -e "$hms $(tput el)\r\c"
      sleep 1
   done
}

# Do various tasks based on the user-specified flags
do_options() {
   if $DO_CUSTOM_CMD; then eval "$CUSTOM_CMD"; fi
   if $DO_NOTIFY && $in_break; then eval "$NOTIFY_CMD $NOTIFY_BREAK";
   elif $DO_NOTIFY; then eval "$NOTIFY_CMD $NOTIFY_WORK"; fi
   if $DO_SPEAK && $in_break; then eval "$SPEAK_CMD $SPEAK_BREAK";
   elif $DO_SPEAK; then eval "$SPEAK_CMD $SPEAK_WORK"; fi
   if $DO_MPD; then (sleep 1 && eval "$MPD_CMD"); fi
}

# Handle CTRL-C interrupt
ctrl_c() {
   interrupt=true
   # Clear the temporary file and refresh tmux when interrupted/terminated
   if $DO_TMUX; then tmux refresh-client -S >/tmp/gtd; fi

   if $in_break; then
      # If INT during break, print total working time
      echo -e "\rTotal working time: $(hms $(( $total_working_time * 60 )) )"
   else
      # If INT during work, print total working time minus time left in this session
      echo -e "\rTotal working time: $(hms $(( ($total_working_time + $work_length) * 60 - $left )))"
   fi

   exit 0
}
trap ctrl_c INT TERM

# Display the initial session settings
clear && echo "$work_length minute sessions with $break_length minute breaks."

# Loop through work and break cycles
while true; do
   # Break period
   if $DO_BREAK; then
      echo -e "Break. Total working time: $(hms $(( $total_working_time * 60 )))"
      in_break=true && do_options
      vsleep $(( $break_length * 60 ))
   else DO_BREAK=true; fi

   # Work period
   echo -e "Period #$count. Total working time: $(hms $(( $total_working_time * 60 )))"
   in_break=false && do_options
   vsleep $(( $work_length * 60 ))

   # Calculate totals
   total_working_time=$(( ($total_working_time + $work_length) ))
   count=$(( $count + 1 ))
done

exit 0
